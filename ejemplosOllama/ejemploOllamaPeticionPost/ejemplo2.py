from langchain_community.llms import Ollama
from langchain.chains import ConversationChain
from langchain.memory import ConversationBufferMemory
import re

# Inicializar el modelo Ollama / Initialize the Ollama model
llm = Ollama(
    model="llama3.2",  # Nombre del modelo / Model name
    base_url="http://localhost:11434"  # URL por defecto de Ollama / Default Ollama URL
)

# Configurar memoria para mantener el historial de conversación / Set up memory for conversation history
memory = ConversationBufferMemory()

# Crear una cadena de conversación con memoria / Create a conversation chain with memory
conversation = ConversationChain(
    llm=llm,
    memory=memory,
    verbose=True  # Mostrar detalles del prompt y memoria / Show prompt and memory details
)

def extract_sql_code(response):
    """
    Extrae solo el código SQL de la respuesta del modelo, eliminando texto adicional.
    / Extracts only the SQL code from the model's response, removing extra text.
    """
    # Usar regex para encontrar bloques de código SQL entre ```sql y ```
    sql_blocks = re.findall(r"```sql\s*(.*?)\s*```", response, re.DOTALL)
    return "\n\n".join(sql_blocks)  # Unir bloques con saltos de línea

def generate_sql_script():
    """
    Genera un archivo SQL para un sistema de inicio de sesión con una tabla de usuarios.

    Esta función solicita al modelo Ollama que genere código SQL para crear una tabla de usuarios,
    incluyendo campos como nombre de usuario, contraseña y correo electrónico, junto con consultas
    de ejemplo. Solo el código SQL limpio se guarda en 'login_system.sql' con comentarios mínimos.
    """
    # Prompt inicial / Initial prompt
    initial_prompt = (
        "Generate SQL code for a login system database. "
        "Include table creation for a 'users' table with username, password, and created_at fields, "
        "plus example SQL queries for inserting a user and retrieving user data by username."
    )

    # Enviar solicitud inicial / Send initial request
    print("Solicitud inicial / Initial Request:")
    initial_response = conversation.predict(input=initial_prompt)
    initial_sql = extract_sql_code(initial_response)
    print(initial_sql)

    # Pregunta de seguimiento / Follow-up question
    follow_up_prompt = (
        "Modify the SQL code to add an email field to the users table "
        "and include a query to check if a user exists by email."
    )

    # Enviar solicitud de seguimiento / Send follow-up request
    print("\nSolicitud de seguimiento / Follow-Up Request:")
    follow_up_response = conversation.predict(input=follow_up_prompt)
    follow_up_sql = extract_sql_code(follow_up_response)
    print(follow_up_sql)

    # Escribir el resultado en un archivo SQL / Write the result to an SQL file
    with open("login_system.sql", "w", encoding="utf-8") as sql_file:
        sql_file.write("-- Script SQL para sistema de inicio de sesión / SQL Script for login system\n")
        sql_file.write("-- Generado por Ollama a través de LangChain / Generated by Ollama via LangChain\n\n")
        sql_file.write("-- Tabla inicial y consultas / Initial table and queries\n")
        sql_file.write(initial_sql)
        sql_file.write("\n\n-- Tabla modificada con email / Modified table with email\n")
        sql_file.write(follow_up_sql)

    print("\nArchivo 'login_system.sql' generado con éxito / File 'login_system.sql' generated successfully.")

# Ejecutar la función / Run the function
if __name__ == "__main__":
    generate_sql_script()